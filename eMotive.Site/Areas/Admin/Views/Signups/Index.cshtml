@using Extensions
@using eMotive.Models.Objects.Signups
@model AdminSignupView
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

@section Crumbs
{
    <ul class="breadcrumb">
        <li>
            <a href="@Url.Action("Index", "Home", new { area = "Admin" })">Home</a> <span class="divider">/</span>
        </li>
        <li class="active">Signups
        </li>
    </ul>
}
<div class="page-header">
    <h2>Signup Administration</h2>
</div>

@if (!Model.Signups.HasContent())
{
    <div class="alert alert-info">No Signups could be found.</div>
}
else
{
    var interviews = Model.GetSignupsGroupedByGroup();
    <div class="row">
        <div class="offset1 span8">

            <ul class="nav nav-tabs" id="GroupList">
                @foreach (var key in interviews.Keys)
                {
                    <li><a href="#@key.Replace(' ', '_')" data-toggle="tab" >@key</a></li>
                }
            </ul>

            <div class="tab-content">
                @foreach (var item in interviews)
                {
                    var keyName = item.Key.Replace(' ', '_');
                    <div class="tab-pane"  id="@keyName">
                        <table class="table table-striped table-hover table-bordered">
                            <thead>
                                <tr>
                                    <th>Description</th>
                                    <th>Date</th>
                                    <th>Main</th>
                                    <th>Reserve</th>
                                    <th>Interested</th>
                                    <th></th>
                                </tr>
                            </thead>
                            @foreach (var signup in item.Value)
                            {
                                var totalPlaces = signup.Slots.Sum(n => n.TotalPlacesAvailable);
                                var TotalReserve = signup.Slots.Sum(n => n.ReservePlaces);
                                var TotalInterested = signup.Slots.Sum(n => n.InterestedPlaces);
                                <tr>
                                    <td>@signup.Description</td>
                                    <td>@signup.Date.ToString("dddd d MMMM yyyy")</td>
                                    <td>
                                        @totalPlaces <!--(totalPlaces - signup.Slots.Sum(n => n.ApplicantsSignedUp != null ? (n.ApplicantsSignedUp.Count) : 0))  /-->
                                    </td>
                                    <td>@TotalReserve</td>
                                    <td>@TotalInterested</td>
                                    <td><!--Html.ActionLink("Details", "SignupDetails", "Signups", new {area = "admin", id = signup.ID}, new {class="btn btn-default"}) Html.ActionLink("Edit", "Edit", "Signups", new { area = "admin", id = signup.ID }, new { class = "btn btn-default" })-->
                                         @Html.ActionLink("Edit", "EditSignup", "Signups", new {area = "admin", id = signup.ID}, new {@class="btn btn-default"})
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
}

@section Scripts
{
    <script type="text/javascript">
        $(function () {
            $('#GroupList a:first').tab('show');
        });
    </script>
}
